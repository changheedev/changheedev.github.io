[ { "title": "2일간 씨름했던 Connection reset by peer", "url": "/posts/2%EC%9D%BC%EA%B0%84_%EC%94%A8%EB%A6%84%ED%96%88%EB%8D%98_Connection_reset_by_peer/", "categories": "개발자로 성장하기", "tags": "회사생활, 개발자, Nginx", "date": "2021-06-10 00:00:00 +0900", "snippet": "현재 담당하고 있는 사내 툴 개발 프로젝트에서 그동안 잘 동작하던 다운로드 API가 오류가 나기 시작했다. 파일의 크기가 약 200KB 이상만 되면 다운로드가 실패하고, 그 이하의 파일들은 다운로드가 정상적으로 동작했다.서버 Application에서 찍히는 로그를 보면 IOException: Connection reset by peer 익셉션 또는 IOException: broken pipe 이 발생하고 있었다.org.apache.catalina.connector.ClientAbortException: java.io.IOExc..." }, { "title": "리얼서비스 첫경험 반성일기", "url": "/posts/%EB%A6%AC%EC%96%BC%EC%84%9C%EB%B9%84%EC%8A%A4_%EC%B2%AB%EA%B2%BD%ED%97%98_%EB%B0%98%EC%84%B1%EC%9D%BC%EA%B8%B0/", "categories": "개발자로 성장하기", "tags": "회사생활, 개발자", "date": "2021-06-04 00:00:00 +0900", "snippet": "입사한지 한달이 조금 넘어가는 시점에서 이벤트 대상자들에게 알림을 발송하는 업무를 맡게 되었다.파일에서 line을 읽어 curl 명령을 실행하는 쉘 스크립트 기본 틀을 리더님께서 구현하여 설명을 해주셨고, 그것을 바탕으로 알림 발송 스크립트를 구현했다.알림을 발송하는 API를 반복적으로 호출해주면 되기 때문에 복잡한 업무는 아니었지만, 리얼 환경의 실제 유저들을 대상으로 하기때문에 실수가 발생할 경우 CS적인 문제가 발생할 수 있는 업무였다.되도록 깔끔하게 마무리하기 위해서 스크립트도 꾸준히 개선하고 사전 테스트도 여러번 진행..." }, { "title": "한글입력 상태에서 백틱(`) 입력설정", "url": "/posts/%ED%95%9C%EA%B8%80%EC%9E%85%EB%A0%A5_%EC%83%81%ED%83%9C%EC%97%90%EC%84%9C_%EB%B0%B1%ED%8B%B1(-)_%EC%9E%85%EB%A0%A5%EC%84%A4%EC%A0%95/", "categories": "Mac", "tags": "Mac, Backtick, KeyBinding", "date": "2021-05-24 00:00:00 +0900", "snippet": "마크다운을 사용하다보면 코드를 입력할 때 백틱(`)을 굉장히 자주 사용하게 된다.그런데 맥에서 한글입력 상태일때 백틱을 입력하면 원(₩) 표시가 입력된다.한글입력 상태에서도 백틱을 사용하려면 아래와 같이 설정해준다.Library 디렉토리로 이동$ cd ~/LibraryKeyBindings 디렉토리 생성$ mkdir KeyBindings$ cd KeyBindingsDefaultkeyBinding.dict 파일 생성$ touch DefaultkeyBinding.dict백틱 binding 설정 입력$ vi DefaultkeyBind..." }, { "title": "자주 사용하는 IP에 Hostname 등록하기", "url": "/posts/%EC%9E%90%EC%A3%BC_%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94_IP%EC%97%90_Hostname_%EB%93%B1%EB%A1%9D%ED%95%98%EA%B8%B0/", "categories": "Mac", "tags": "Mac, IP, Hostname", "date": "2021-05-24 00:00:00 +0900", "snippet": "터미널에서 /etc/hosts를 편집기로 실행한다.$ sudo vi /etc/hosts다음과 같은 화면이 나오면 localhost 의 내용 밑에 등록하고자 하는 IP와 원하는 호스트이름을 입력한다.# Host Database## localhost is used to configure the loopback interface# when the system is booting. Do not change this entry.##127.0.0.1 localhost255.255.255.255 broadcasthost::1 ..." }, { "title": "UriComponentsBuilder 활용 정리", "url": "/posts/UriComponentsBuilder_%ED%99%9C%EC%9A%A9%EC%A0%95%EB%A6%AC/", "categories": "Programming, Spring", "tags": "Spring, UriComponents, UriComponentsBuilder", "date": "2021-05-20 00:00:00 +0900", "snippet": "UriComponentsBuilder 스프링에서 URI를 생성할 때, 편리하게 할 수 있도록 도와주는 클래스. Spring Web 의존성이 필요하고 org.spring.framework.web.util 패키지에 포함되어 있다.사용법 fromXXX() 메소드를 사용하여 UriComponentsBuilder를 생성한다. path(), queryParam() 등 각 메소드를 이용하여 URI 컴포넌트들을 세팅한다. 빌드하여 UriComponents 인스턴스를 생성한다.기본 사용예시UriComponents uriComponen..." }, { "title": "이레이저코딩 &amp; 오브젝트 스토리지", "url": "/posts/%EC%9D%B4%EB%A0%88%EC%9D%B4%EC%A0%80%EC%BD%94%EB%94%A9_%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80/", "categories": "Programming, DB", "tags": "DB, 오브젝트스토리지, 이레이저코딩, RAID", "date": "2021-03-12 00:00:00 +0900", "snippet": "1. RAID(Redundant Array of Independent Disks) 여러 개의 데이터 조각으로 배열된 각각의 디스크를 의미한다. 배열이란 한 데이터를 쪼개서 각 디스크에 저장하는 것을 의미하며, 크게 스트라이핑(striping) 과 미러링(mirroring) 으로 나뉜다. 단일 저장장치의 용량이 수TB로 커지게 되면서 RAID의 실용성에 의문이 제기되고 있다. 거대한 용량을 다루게 되면서 디스크 복구 작업이 길어지고 한두 개의 디스크 오류에 대처 가능한 정도로는 부족하기 때문 ..." }, { "title": "Join 기법 정리 (Nested Loop, Sort Merge, Hash)", "url": "/posts/Join%EA%B8%B0%EB%B2%95_%EC%A0%95%EB%A6%AC/", "categories": "Programming, DB", "tags": "DB, Join", "date": "2021-01-17 00:00:00 +0900", "snippet": "1. Nested Loop Join NL 조인은 프로그램에서 사용하는 중첩된 반복문과 유사한 방식으로 조인을 수행한다. 반복문의 외부에 있는 테이블을 선행 테이블 또는 외부테이블(OUTER TABLE)이라고하고, 반복문의 내부에 있는 테이블을 후행 테이블 또는 내부(INNER TABLE)이라고 한다. FOR 선행 테이블 읽음 -&amp;gt; 외부테이블(OUTER TABLE) FOR 후행테이블 읽음 -&amp;gt; 내부 테이블(INNER TABLE) (선행 테이블과 후행 테이블조인) 먼저 선행 테이블의 조건을 만족하는..." }, { "title": "Atomic과 Synchronized", "url": "/posts/Atomic%EA%B3%BC_Synchronized/", "categories": "Programming, Java", "tags": "Java, Atomic, Synchronized, Volatile, Concurrency", "date": "2021-01-12 00:00:00 +0900", "snippet": "mutable한 객체를 공유하는 환경에서 객체에 대한 액세스가 제대로 관리되지 않으면 응용 프로그램은 감지하기 어려운 동시성 오류에 노출 될 수 있다.public class Counter { int counter; public void increment() { counter++; }}위의 코드는 싱글 스레드 환경에서는 문제없이 동작한다. 하지만 여러 스레드가 write 하는것을 허용하면 일관성이 없는 결과를 얻게 된다.counter++ 명령은 원자적인 명령어 처럼 보이지만 실제로는 3개의 명령으로 ..." }, { "title": "Bean 정리", "url": "/posts/Bean_%EC%A0%95%EB%A6%AC/", "categories": "Programming, Spring", "tags": "Spring, Bean, Scope, Singleton, Prototype", "date": "2021-01-11 00:00:00 +0900", "snippet": "Bean빈(Bean)이란 Spring의 IoC 컨테이너에서 의존성을 주입하기 위해 내부적으로 생성하는 객체를 말한다. 이렇게 컨테이너에서 의존성을 관리해주기 때문에 제어가 역전(IoC - Inversion of Control) 되었다고 하며 개발자가 직접 의존성 객체를 생성하고 주입해주지 않아도 되기 때문에 개발 과정이 간편해지는 장점이 있다.빈을 등록하는 방식에는 @Component 어노테이션과 @Bean 어노테이션으로 등록하는 방법 두가지가 있다.@Component는 클래스에서 사용가능하며 프레임워크에서 인스턴스를 생성한 ..." }, { "title": "NCP에서 HA 구성해보기", "url": "/posts/NCP%EC%97%90%EC%84%9C_HA_%EA%B5%AC%EC%84%B1%ED%95%B4%EB%B3%B4%EA%B8%B0/", "categories": "Programming, DevOps", "tags": "DevOps, Ubuntu, HA, NCP", "date": "2020-12-30 00:00:00 +0900", "snippet": "부스트캠프에서 팀프로젝트를 하면서 HAProxy를 이용한 로드밸런싱을 구현했었는데 실제 서비스에서는 안정성을 위해 Proxy 서버를 이중화하여 HA(High Availability)를 구성한다고 한다.HA 구성에 대한 자료를 찾아보니 마침 NCP(네이버 클라우드 플랫폼) 환경에서 HA를 구성하는 방법이 있었는데 직접 적용해보면서 그 과정을 정리하려고 한다. (하루 남은 크레딧도 알차게 사용할겸..)이 방법은 Keepalived를 이용한다.Keepalived 가상 IP를 기반으로 서버를 다중화하는 도구 Master 서버를 모..." }, { "title": "서버 보안 설정 정리", "url": "/posts/%EC%84%9C%EB%B2%84%EB%B3%B4%EC%95%88/", "categories": "Programming, DevOps", "tags": "DevOps, Ubuntu", "date": "2020-12-12 00:00:00 +0900", "snippet": "SSH root 접속 / password 로그인 방지sudo nano /etc/ssh/sshd_configsshd_configPermitRootLogin no //root 접속 허용 xPasswordAuthentication no //password 접속 허용 xsshd 재실행sudo service sshd restartMySQL root 계정 외부 접속 막기root 계정으로 브루트포스 공격을 하지 못하도록 계정명을 변경하거나 외부 접속용 root 계정을 삭제한다.1. 계정명 변경use mysql;update user set ..." }, { "title": "React 프로젝트 배포 삽질기", "url": "/posts/React_%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8_%EB%B0%B0%ED%8F%AC_%EC%82%BD%EC%A7%88%EA%B8%B0/", "categories": "Programming, DevOps", "tags": "React, DevOps, 문제해결, NGINX, Webpack", "date": "2020-11-09 00:00:00 +0900", "snippet": "부스트캠프 멤버십 과정의 3주 팀 프로젝트를 시작하면서 가장 먼저 해야겠다고 생각한 작업은 배포 자동화 작업이었다. 그 이유는 팀 회의에서 배포 전략을 특정 일을 기준으로 작업을 모은 후 배포를 시키는 것이 아닌 기능이 완성될 때마다 꾸준히 지속적으로 배포를 시키는 것으로 정했고, 그러기 위해서는 배포를 쉽고 간단하게 진행할 수 있어야 하기 때문이다. (배포 과정이 복잡하고 어려우면 배포 하는 것을 꺼리게 된다..)그래서 첫 1주는 틈틈이 GitHub Action과 Docker를 이용하여 배포 자동화 환경을 구축하는 작업을 진..." }, { "title": "TypeORM과 Webpack 연동 `Critical dependency: the request of a dependency is an expression` 오류 해결", "url": "/posts/TypeORM%EA%B3%BC-Webpack-%EC%97%B0%EB%8F%99%EC%98%A4%EB%A5%98%ED%95%B4%EA%B2%B0/", "categories": "Programming, Node.js", "tags": "webpack, nodejs, typeorm", "date": "2020-10-23 00:00:00 +0900", "snippet": "TypeORM과 Webpack을 연동하고 난 다음 번들링을 했을 때 아래와 같은 디펜던시 관련 오류가 다수 발생했다.WARNING in ./node_modules/typeorm/connection/ConnectionOptionsReader.js 175:14-33Critical dependency: the request of a dependency is an expression @ ./node_modules/typeorm/index.js @ ./src/app.ts @ ./src/server.tsWARNING in ./node_m..." }, { "title": "Git add와 commit 내부동작 확인해보기", "url": "/posts/Git-add-commit-%EB%82%B4%EB%B6%80%EB%8F%99%EC%9E%91-%ED%99%95%EC%9D%B8%ED%95%B4%EB%B3%B4%EA%B8%B0/", "categories": "Programming, Git", "tags": "git, add, commit", "date": "2020-08-02 00:00:00 +0900", "snippet": "1. ObjectGit은 데이터를 저장할 때 데이터와 헤더로 생성한 SHA-1 체크섬으로 파일 이름을 짓는다. 해시의 처음 두 글자를 따서 디렉토리 이름에 사용하고 나머지 38글자를 파일 이름에 사용하는데 이 파일은 .git/objects 경로 아래에 저장된다.Git의 Object에는 3가지 타입이 있다. 파일의 내용을 담는 (blob) 디렉토리의 파일명과 내용에 해당되는 블록의 정보 (tree) 커밋정보 (commit)1.1 Blob 파일의 내용을 저장하는 object 파일 내용을 SHA-1 알고리즘으로 해시하고 ...." }, { "title": "ArrayList vs LinkedList", "url": "/posts/ArrayList-vs-LinkedList/", "categories": "Programming, Java", "tags": "ArrayList, LinkedList, Algorithm, Java", "date": "2020-08-01 18:11:00 +0900", "snippet": "얼마 전 알고리즘 문제를 풀던 중 LinkedList를 이용해 그래프 구조를 만들었는데 시간초과가 발생했다. 그런데 LinkedList를 ArrayList로 변경하니 통과가 됐다.문제가 되었던 부분의 코드는 아래와 같이 리스트의 i번째 인덱스에 접근하는 코드였었다.LinkedList의 get은 시작 노드에서 시작해서 i번째 노드까지 링크를 타고 순차적으로 탐색이 이루어지는데 이 문제는 탐색 과정이 더 많았기 때문에 LinkedList를 사용하는 것이 성능적으로 불리하다는 점을 놓쳤던 것이다.for (int i = 0; i &a..." }, { "title": "Java - HashMap 정리", "url": "/posts/Java_HashMap_%EC%A0%95%EB%A6%AC/", "categories": "Programming, Java", "tags": "JAVA, HashMap, TreeMap, Hash", "date": "2020-07-30 00:00:00 +0900", "snippet": "1. HashMap 데이터를 Key와 Value로 저장하는 자료구조 효율적인 검색을 위해 사용된다 Key 값을 해시함수로 해싱하여 해당 데이터가 위치한 버킷의 주소값을 찾을 수 있고 이를 통해 바로 찾으려는 데이터에 접근한다.1.1 자바의 HashMap현재 사용하고 있는 자바8 버전의 HashMap은 해시 충돌을 체이닝 기법을 통해 회피하고 있었는데, 하나의 해시 버킷에 체이닝 된 데이터의 수에 따라 링크드 리스트와 트리를 변경해가며 사용한다는 점이 흥미로웠다.링크드 리스트일때 사용하는 데이터 타입class Node&am..." }, { "title": "Gradle - implementation vs api", "url": "/posts/gradle_implementation_vs_api/", "categories": "Programming, Spring", "tags": "Gradle, implementation, api", "date": "2020-04-13 00:00:00 +0900", "snippet": "Gradle 3.0 에서 complie 키워드가 implementation 과 api 두 가지로 분리되었다.두 경우의 차이를 구글링해보면 아래와 같이 설명하고 있다.implemetation Gradle은 종속성을 컴파일 클래스 경로에 추가하여 종속성을 빌드 출력에 패키징합니다. 다만 모듈이 implementation 종속성을 구성하는 경우, 이것은 Gradle에 개발자가 모듈이 컴파일 시 다른 모듈로 유출되는 것을 원치 않는다는 것을 알려줍니다. 즉, 종속성은 런타임 시 다른 모듈에서만 이용할 수 있습니다. api 또는 c..." }, { "title": "SSH Config 등록 및 SSH key 인증", "url": "/posts/SSH-Config-%EB%93%B1%EB%A1%9D-%EB%B0%8F-SSH-key-%EC%9D%B8%EC%A6%9D/", "categories": "Mac", "tags": "Mac, ssh, ssh-key", "date": "2020-03-17 00:48:00 +0900", "snippet": "SSH 접속 정보 Config 등록SSH 접속 정보를 config 로 등록해두면 IP를 매번 입력하지 않고 접속할 수 있다.$ sudo nano ~/.ssh/config&amp;gt;&amp;gt; 내용 입력Host &amp;lt;접속시 사용할 이름&amp;gt;HostName &amp;lt;ip 주소&amp;gt;User &amp;lt;계정 이름&amp;gt;//예시Host my-remote-serverHostName 123.123.123.123User changheeconfig 등록 후 ssh &amp;lt;Host&amp..." }, { "title": "async/await", "url": "/posts/async-await/", "categories": "Programming, Javascript", "tags": "Javascript, async-await", "date": "2020-02-28 21:28:00 +0900", "snippet": "콜백 방식의 단점들을 개선하기 위해 Promise 스펙이 추가되었지만 여전히 아래와 같이 복잡한 구조가 발생할 수 있다.PromisedoSomething().then((result) =&amp;gt; { afterDoSomething(result).then((result) =&amp;gt; { finalDoSomething(result).then((result) =&amp;gt; { // ... }); });});ES8 에서 추가된 async / await 를 사용하면, ..." }, { "title": "Promise와 이벤트 루프", "url": "/posts/Promise%EC%99%80-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84/", "categories": "Programming, Javascript", "tags": "Javascript, Promise, 이벤트루프", "date": "2020-02-27 20:55:00 +0900", "snippet": "아래의 코드는 Promise 가 이벤트 루프에서 어떻게 처리되는지 확인해보기 위한 코드이다.const prom1 = () =&amp;gt; { return new Promise((resolve, reject) =&amp;gt; { console.log(&#39;prom1&#39;); resolve(); });}const prom2 = () =&amp;gt; { return new Promise((resolve, reject) =&amp;gt; { console.log(&#3..." }, { "title": "Promise", "url": "/posts/Promise/", "categories": "Programming, Javascript", "tags": "Javascript, Promise", "date": "2020-02-27 20:28:00 +0900", "snippet": "Promise 는 ES6 에서 추가되었으며, 자바스크립트의 비동기 작업을 처리하기 위해 사용한다.&amp;lt;/br&amp;gt;기존의 자바스크립트에서는 비동기 작업을 처리하기 위해 콜백 방식을 사용하고 있었다. 하지만 콜백 방식은 여러 단계의 비동기 작업을 처리하는 경우 콜백에서 콜백을 호출하는 코드가 반복되면서 관리가 복잡해지고, 에러 핸들링이 필요한 경우 각 콜백에서 또 다시 콜백으로 처리를 해주어야 했다.&amp;lt;/br&amp;gt;CallbackdoSomething(function (result) { do..." }, { "title": "이벤트 루프", "url": "/posts/%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84/", "categories": "Programming, Javascript", "tags": "Javascript, 이벤트루프", "date": "2020-02-26 00:29:00 +0900", "snippet": "자바스크립트는 이벤트 루프에 기반한 동시성(concurrency) 모델을 가지고 있다.자바스크립트에서 호출된 함수는 콜 스택(Call Stack) 으로 푸쉬되어 처리 되는데, 단일 콜 스택을 사용하기 때문에 (자바스크립트가 싱글 쓰레드라고 얘기되는 것은 이 부분과 연관된다.) 현재 콜 스택으로 푸쉬 된 함수에서 어떤 이벤트를 처리하기 위해 이벤트의 발생을 대기하거나, 응답을 기다리게 된다면 모든 작업이 block 되어 버린다.다행히 브라우저 또는 Node.js 등의 자바스크립트 런타임 환경은 멀티 쓰레드가 가능하기 때문에 비동..." }, { "title": "클래스", "url": "/posts/%ED%81%B4%EB%9E%98%EC%8A%A4/", "categories": "Programming, Javascript", "tags": "Javascript, class", "date": "2020-02-25 17:09:00 +0900", "snippet": "클래스는 ES6 에서 추가된 키워드로 기존의 prototype 기반의 방식을 좀 더 명료하게 사용하기 위한 것이며, 새로운 객체지향 상속 모델을 제공하는 것은 아니다.클래스 정의함수와 마찬가지로 선언적 방식과 변수에 할당하는 방식을 사용할 수 있다. 하지만 클래스는 함수와 달리 호이스팅이 일어나지 않는다.//선언적 방식class A {}new A();//변수에 할당const B = class {};new B();생성자(constructor)클래스의 인스턴스를 생성할때 constructor 가 실행되는데 이 안에 필요한 초기화 ..." }, { "title": "프로토타입 체인", "url": "/posts/Prototype-chain/", "categories": "Programming, Javascript", "tags": "Javascript, 프로토타입", "date": "2020-02-24 21:53:00 +0900", "snippet": "자바스크립트의 OOP는 프로토타입을 통해 이루어진다. 자바스크립트의 모든 객체는 기본 객체 타입인 Object 객체가 최상위 타입이 되는데 객체를 생성해보면 Object 객체의 프로토타입에 등록되어 있는 함수인 toString, valueOf 등을 사용할 수 있는 것을 확인할 수 있다. 프로토타입 객체는 생성한 각각의 객체에서부터 최상위 객체인 Object의 프로토타입까지 연결되어있는데 이를 프로토타입 체인이라고 한다.function Person(name) { this.name = name;}const me = new P..." }, { "title": "this", "url": "/posts/this/", "categories": "Programming, Javascript", "tags": "Javascript, this", "date": "2020-02-24 14:38:00 +0900", "snippet": "this자바 스크립트에서 this 는 기본적으로 전역 객체를 가리킨다. (node.js : global, browser : window)함수 내에서 this 를 참조하더라도 마찬가지로 전역 객체가 찍히게 된다. this는 기본적으로 전역 객체를 가리키도록 되어있기 때문이다.function a() { console.log(this); //Object [global] {...} or window {...}}a();그러나, 예외적으로 this에 바인딩되는 객체가 변하는 순간들이 있다.1) 객체의 함수 호출객체의 함수를 호출하게..." }, { "title": "호이스팅", "url": "/posts/%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85/", "categories": "Programming, Javascript", "tags": "Javascript, 호이스팅", "date": "2020-02-21 16:38:00 +0900", "snippet": "1. 호이스팅이란?호이스팅이란 var 변수 또는 함수의 선언을 끌어올리는 것을 말한다.변수를 참조하거나 함수를 호출하기 위해서는 그 코드보다 선언의 코드가 먼저 위치해야 한다.하지만 자바스크립트에서는 호이스팅으로 인해 var 변수나 함수를 선언하기 전에 미리 참조하거나 실행하는 코드를 작성하더라도 선언이 최상위 위치로 끌어올려지기 때문에 에러가 발생하지 않게 된다.1.1) var 변수의 호이스팅var 변수라고 특정 지은 이유는 es6 부터 사용하는 let 변수의 경우 호이스팅이 일어나지 않기 때문이다.foo = &#39;foo..." } ]
